
ImiÄ™: [kajetan]
Nazwisko: [Spychała]
Numer albumu: [30539]

# --------------------------------------------------------
# Zadanie.06 
#
#	Firma sprzedaje trzy kategorie produktÃ³w A, B oraz C. KaÅ¼dy z nich
# jest obÅ‚oÅ¼ony innÄ… stawkÄ… podatku VAT (odpowiednio: 8%, 10% i 20%). Pobierz
# kategoriÄ™ i cenÄ™. UÅ¼yj wyraÅ¼enia warunkowego, aby wyliczyÄ‡ cenÄ™ z podatkiem.
# Zakomunikuj wynik do uÅ¼ytkownika. {uÅ¼yj if else}
#
# --------------------------------------------------------

##> ObowiÄ…zuje stawka VAT 8%. Cena wraz z podatkiem wynosi 54.
##> ObowiÄ…zuje stawka VAT 8%. Cena wraz z podatkiem wynosi 55.
##> ObowiÄ…zuje stawka VAT 8%. Cena wraz z podatkiem wynosi 60.
#-----------------------------------------------------------
# Pobierz cenę
cena <- as.numeric(readline("Podaj cenę produktu: "))

# Wyznacz stawkę VAT
if (kategoria == "A") {
  stawka_vat <- 0.08
} else if (kategoria == "B") {
  stawka_vat <- 0.1
} else {
  stawka_vat <- 0.2
}

# Oblicz cenę z podatkiem
cena_z_vat <- cena * (1 + stawka_vat)

if (category =='A'){
  cat('Obowiązuje stawka VAT 8%.','Cena wraz z podatkiem wynosi',price *1.08)
} else if (category =='B'){
  cat('Obowiązuje stawka VAT 10%.','Cena wraz z podatkiem wynosi',price *1.10)
} else {
  cat('Obowiązuje stawka VAT 20%.','Cena wraz z podatkiem wynosi',price *1.20)
}
# --------------------------------------------------------
# Zadanie.07
#
#	Oblicz iloczyn elementÃ³w dowolnego wektora x za pomocÄ… pÄ™tli while oraz repeat 
# {uÅ¼yj while, repeat}
# 
#	x <- 1:5
#	
#
# --------------------------------------------------------
#	#Pętla while dla wektora 1:5
wektor_x <- 1:5
iloczyn <- 1
i <- 1
while(i <= length(wektor_x)){
  iloczyn <- iloczyn * wektor_x[i]
  i <- i + 1
  print(iloczyn)
}

#Pętla repeat dla wektora 1:10
x <- 1:10
prod_repeat <- 1
j <- 1
repeat{
prod_repeat <- prod_repeat * x[j]
j <- j + 1
print(prod_repeat)
if(j > length(x)){
break
  }
}
  
  
# --------------------------------------------------------
# Zadanie.08
#
# UÅ¼yj zbioru airquality. Odpowiedz na pytania: 		
# a) ile jest przypadkÃ³w w zbiorze
# b) ile jest przypadkÃ³w z brakami danych
# c) ile, i jakich, jest zmiennych w zbiorze
# d) ile, i jakich, jest zmiennych z brakami danych
# 
# SformuÅ‚uj peÅ‚ne odpowiedzi tekstowe. Wklej kod obliczeÅ„.
#
# --------------------------------------------------------

#Uruchomienie odpowiedniej biblioteki, jeżeli nie jest jeszcze zainstalowana
if(!require('stats')) {
  install.packages('stats')
  library('stats')
}
#Wczytanie danych airquality
data(airquality)

#a)Ile jest przypadków w zbiorze
ile <- nrow(airquality)
print(paste("Liczba przypadków w zbiorze airquality:",ile))

#b)Ile jest przypadków z brakami danych
brak_danych <- sum(is.na(airquality))
print(paste("Liczba przypadków z brakami danych:", brak_danych))

#c)Ile, i jakich, jest zmiennych w zbiorze
l_zmiennych <- ncol(airquality)
nazwy_zmiennych <- colnames(airquality)
print(paste("Liczba zmiennych w zbiorze airquality:", l_zmiennych))
print(paste("Nazwy zmiennych w zbiorze airquality:", paste(nazwy_zmiennych, collapse = ", ")))

#d)Ile, i jakich, jest zmiennych z brakami danych
zmienna_z_brakami <- colnames(airquality)[colSums(is.na(airquality)) > 0]
liczba_zmiennych_z_brakami <- length(zmienna_z_brakami)

print(paste("Liczba zmiennych z brakami danych:", liczba_zmiennych_z_brakami))
print(paste("Nazwy zmiennych z brakami danych:", paste(zmienna_z_brakami, collapse = ", ")))
  
# --------------------------------------------------------
# Zadanie.09
#
#	CiÄ…g Fibonacciego to ciÄ…g liczb naturalnych, taki Å¼e kaÅ¼dy kolejny
# wyraz stanowi sumÄ™ dwÃ³ch poprzednich. 
#	https://pl.wikipedia.org/wiki/Ci%C4%85g_Fibonacciego
#	
#	UÅ¼yj pÄ™tli for, aby stworzyÄ‡ 20 pierwszych wyrazÃ³w ciÄ…gu.
#	Podaj ich sumÄ™. {uÅ¼yj pÄ™tli for}
#	
# --------------------------------------------------------  
#wektor 2 pierwszych znaków ciągu fib
ciag_fib <- c(0,1) 
#pętla for dla 20 znaków
for (i in 3:20){

  nowy = ciag_fib[i-1] + ciag_fib[i-2]
  ciag_fib = c(ciag_fib, nowy)

}
print("Pierwsze 20 znaków ciągu fibinocciego to: ")
print(ciag_fib)

print(paste("Suma 20 znaków ciągu fibonacciego to: ", sum(ciag_fib)))


# --------------------------------------------------------
# Zadanie.10
# 
# Wygeneruj 100-elementowy wektor z rozkÅ‚adu Poisonna z parametrem 
# lambda=5 zapomocÄ… komendy {rpois} i przypisz go do zmiennej x.
# Policz dla tego wektora: Å›redniÄ…, sumÄ™, odchylenie standardowe. 
# Zwizualizuj wektor za pomocÄ… histogramu oraz wykresu pudeÅ‚kowego (boxplot)
# (sÅ‚upki w kolorze niebieskim, tytuÅ‚ wykresu "RozkÅ‚ad Poissona"). 
# 
# --------------------------------------------------------  
  
#Stworzenie wektora 100 elementowego z rozkładem Poissona, lambda = 5
x <- rpois(100, 5)
x

#Średnia 
sr_x <- mean(x)
print(paste("Średnio wektora x to: ", sr_x))
#Suma
suma_x <- sum(x)
print(paste("Suma wektora x to: ", suma_x))
#Odchylenie standardowe
odch_stand_x <- sd(x)
print(paste("Odchylenie standardowe wektora x to: ", round(odch_stand_x,2)))

#Histogram
histogram <- hist(x, col = 'blue',xlim = c(0,15), xaxp = c(0,15, 15),
xlab = 'liczba', ylab = 'ilość wystąpień', main = 'Rozkład Poissona')

#Boxplot
boxplocik = boxplot(x, col = 'blue',ylab = 'liczba', ylim = c(0,12),yaxp = c(0,12, 12), main = "Rozkład Poissona")

# --------------------------------------------------------
# Zadanie.11
  
# Wczytaj dane ze zbioru "countries of the world.csv" 
# Zapoznaj siÄ™ z danymi korzystajÄ…c np. z funkcji names(), summary(), str(), 
# dim(), itd., obejrzysz teÅ¼ dane za pomocÄ… funkcji View()
# ZamieÅ„ puste pola na wartoÅ›ci NA: data[data==""] <- NA
# zmieÅ„ nazwy kolumn, zgodnie z nastÄ™pujÄ…cym wzorem:
# Area_sq_mi -> Area
# Pop_Density_per_sq_mi -> Pop_dens
# GDPper_capita -> GDP
# UsuÅ„ ze zbioru wszystkie zmienne poza: Country, Region, Population, Area, 
# Pop_dens, GDP, Literacy, Birthrate, Deathrate.
# UsuÅ„ spacje ze zmiennej Region (z przodu i z tyÅ‚u nazw - funkcja str_trim)
#  
# Dla ilu krajÃ³w wystÄ™pujÄ… braki danych w zmiennej Literacy? UÅ¼yj funkcji is.na i sum
# WyÅ›wietl wszystkie kategorie zmiennej Region. Jaka jest dominanta? (RVAideMemoire::mod(?))
# SprawdÅº udziaÅ‚ procentowy poszczegÃ³lnych kategorii.
# Jaka jest Å›rednia i mediana zmiennych Population, Area i GDP? 
# StwÃ³rz histogram oraz wykres pudeÅ‚kowy dla zmiennych GDP oraz Literacy. 
# Odpowiednio podpisz osie histogramu (uwzglÄ™dniajÄ…c teÅ¼ jednostki)
# WyÅ›wietl kwartyle dla funkcji GDP. Teraz stwÃ³rz nowÄ… zmiennÄ… - bÄ™dzie to zmienna 
# kategorycznÄ… oparta na zmiennej GDP. Nowa zmienna:
# - powinna siÄ™ nazywaÄ‡ "GDP_binned"
# - bÄ™dzie przyjmowaÄ‡ cztery wartoÅ›ci (kategorie):
# - pierwsza kategoria ma zawieraÄ‡ wartoÅ›ci od minimum do pierwszego kwartyla. Nazwij jÄ… "Very_poor"
# - druga kategoria ma zawieraÄ‡ wartoÅ›ci od pierwszego kwartyla do mediany. Nazwij jÄ… "Poor"
# - trzecia kategoria ma zawieraÄ‡ wartoÅ›ci od mediany do trzeciego. Nazwij jÄ… "Medium"
# - czwarta kategoria ma zawieraÄ‡ wartoÅ›ci od mediany do trzeciego. Nazwij jÄ… "Rich"
# - (uÅ¼yj funkcji ifelse albo case_when)  
# StwÃ³rz nowÄ… zmiennÄ… logicznÄ…, ktÃ³ra przyjmuje wartoÅ›Ä‡ â€žTrueâ€, kiedy wartoÅ›Ä‡ 
# zmiennej â€žBirthrateâ€ jest wiÄ™ksza lub rÃ³wna od wartoÅ›ci zmiennej â€žDeathrateâ€,
# a wartoÅ›Ä‡ â€žFalseâ€ w przeciwnym przypadku. WartoÅ›Ä‡ â€žTrueâ€ w nowej zmiennej
# oznacza â€“ najproÅ›ciej ujmujÄ…c â€“ Å¼e w roku badania w danym kraju wiÄ™cej osÃ³b siÄ™
# urodziÅ‚o niÅ¼ umarÅ‚o. StwÃ³rz wykres sÅ‚upkowy dla nowo powstaÅ‚ej zmiennej, 
#  pokazujÄ…c czÄ™stoÅ›ci wystÄ™powania pierwszej i drugiej kategorii.
#------------------------------------------------------------------------
#Biblioteka stringr
install.packages("stringr")
require("stringr")
#Wczytanie danych ze zbioru csv
plik <- read.csv("C:/Users/patry/Desktop/R/countries of the world.csv", header = TRUE, sep = ",")

#zapoznanie się z danymi
nazwy_kolumn <- colnames(plik)
nazwy_kolumn
summar <- summary(plik)
summar

#Zamiana pustych pól na NA
plik[plik == ''] <- NA

#Zamiana nazw kolumn Area, Pop_dens oraz GDP
colnames(plik)[colnames(plik) == "Area..sq..mi.."] ="Area"
colnames(plik)[colnames(plik) == "Pop..Density..per.sq..mi.."] ="Pop_dens"
colnames(plik)[colnames(plik) == "GDP....per.capita."] ="GDP"

#Usunięcie ze zbioru wszystkich kolumn oprócz Country, Region, Population, Area, 
# Pop_dens, GDP, Literacy, Birthrate, Deathrate.
plik <- subset(plik, select = -c(6,7,8,11,12,13,14,15,18,19,20))
plik$Region <- str_trim(plik$Region)


# Dla ilu krajów występują braki danych w zmiennej Literacy?
ile <- sum(is.na(plik$Literacy....))
ile
#Wyświetl wszystkie kategorie zmiennej Region. Jaka jest dominanta?
install.packages("RVAideMemoire")
require("RVAideMemoire")
kat_region <- mod(plik$Region)
print(paste("Dominanta to: ",kat_region))

#Wszystkie kategorie
zmienna_region <- unique(plik$Region)
zmienna_region
# Sprawdź udział procentowy poszczególnych kategorii.
grupa_ilosc <- table(plik$Region)
grupa_ilosc
wszystkie_ilosc <- sum(grupa_ilosc)
wszystkie_ilosc
uklad_proc <- round((grupa_ilosc/wszystkie_ilosc)*100, 2)
uklad_proc
# Jaka jest średnia i mediana zmiennych Population, Area i GDP? 
#Średnia
srednia <- round(c(mean(plik$Population),mean(plik$Area), mean(plik$GDP, na.rm = TRUE)), 2)
print(paste("Średnia dla zmiennej Population wynosi: ", srednia[1]))
print(paste("Średnia dla zmiennej Area wynosi: ", srednia[2]))
print(paste("Średnia dla zmiennej GDP wynosi: ", srednia[3]))
#Mediana
mediana <-round(c(median(plik$Population),median(plik$Area), median(plik$GDP, na.rm = TRUE)), 2)
print(paste("mediana dla zmiennej Population wynosi: ", mediana[1]))
print(paste("mediana dla zmiennej Area wynosi: ", mediana[2]))
print(paste("mediana dla zmiennej GDP wynosi: ", mediana[3]))



# Stwórz histogram oraz wykres pudełkowy dla zmiennych GDP oraz Literacy. 
dane_GDP <- plik$GDP
dane_GDP

#Zmienna Literacy jest typu character przez co nie mozna utworzyć Histogramu, Trzeba zamienić na typ numeryczny
dane_Literacy <- plik$Literacy....
dane_Literacy
liter <- gsub(",",".",dane_Literacy)
liter
liczby_liter <- as.numeric(liter)
liczby_liter

#Histogram i boxplot dla GDP
hist_GDP <- hist(dane_GDP, col = 'red',xlab = 'GDP [zł]',ylab = 'Częstotliwość występowania', main = 'Wykres GDP')

boxplotGDP = boxplot(dane_GDP, col = 'blue', main = "Wykres pudełkowy GDP")

#Histogram is boxplot dla Literacy
hist_Literacy <- hist(liczby_liter, xlab = "alfabetyzm [%]", ylab = 'Częstotliwość', col = 'green', main = 'Wykres kolumny Literacy')

boxplotLiteracy <- boxplot(liczby_liter, col = 'blue', main = "Wykres pudełkowy Literacy")

# Wyświetl kwartyle dla funkcji GDP.
kwartyl <-quantile(dane_GDP, na.rm = TRUE)
kwartyl
# Teraz stworz nową zmienną - będzie to zmienna 
# kategoryczną oparta na zmiennej GDP. Nowa zmienna:
# - powinna się nazywać "GDP_binned"
# - będzie przyjmować cztery wartości (kategorie):
# - pierwsza kategoria ma zawierać wartości od minimum do pierwszego kwartyla. Nazwij ją "Very_poor"
# - druga kategoria ma zawierać wartości od pierwszego kwartyla do mediany. Nazwij ją "Poor"
# - trzecia kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Medium"
# - czwarta kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Rich"
# - (użyj funkcji ifelse albo case_when)
install.packages("dplyr")
require("dplyr")

df_GDP_bez_NA <- data.frame(na.omit(dane_GDP))

GDP_binned <-df_GDP_bez_NA %>% mutate(GDP_binned = case_when(
  df_GDP_bez_NA < kwartyl[2] ~ 'Very Poor',
  df_GDP_bez_NA < kwartyl[3] ~ 'Poor',
  df_GDP_bez_NA < kwartyl[4] ~ 'Medium',
  TRUE ~ 'Rich'))
GDP_binned


# Stwórz nową zmienną logiczną, która przyjmuje wartość „True”, kiedy wartość 
# zmiennej „Birthrate” jest większa lub równa od wartości zmiennej „Deathrate”,
# a wartość „False” w przeciwnym przypadku. Wartość „True” w nowej zmiennej
# oznacza – najprościej ujmując – że w roku badania w danym kraju więcej osób się
# urodziło niż umarło.
zmienna = TRUE
new_zmienna <- TRUE
i=1

br <- gsub(",",".",plik$Birthrate)


dr <- gsub(",",".",plik$Deathrate)

while(i<=length(plik$Country)){
if((is.na(br[i] == TRUE))||(is.na(dr[i] == TRUE))){
  i=i+1
  next
} else if (br[i] >= dr[i]){
    zmienna = TRUE
    new_zmienna[i] = zmienna
    i=i+1
} else {
  zmienna = FALSE
  new_zmienna[i] = zmienna
  i=i+1
}
}
new_zmienna

dl_new_zmienna <- length(new_zmienna)
czestosc_new_zmienna <- table(new_zmienna)
procent_new_zmienna <- (czestosc_new_zmienna/dl_new_zmienna)*100
procent_new_zmienna
os_x <- c("FALSE", "TRUE")
#Stwórz wykres słupkowy dla nowo powstałej zmiennej, pokazując częstości występowania pierwszej i drugiej kategorii.
wykres_slupkowy <- barplot(procent_new_zmienna, names.arg = os_x,main = "Wykres słupkowy", xlab = "BOLLEAN VALUE",yaxp = c(0,100, 10), ylab = "częstość występowania [%]", col = 'purple')


